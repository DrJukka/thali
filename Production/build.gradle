apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = 1.6

def androidTestTask(include = true) {
   if (include == false || project.hasProperty('skipAndroidTest') || project.hasProperty('skipAllTest')) {
        return null
   } else {
        return 'connectedAndroidTest';
   }
}

def testTask(include = true) {
    if (include == false || project.hasProperty('skipJavaTest') || project.hasProperty('skipAllTest')) {
        return null
    }

    return 'test'
}

/*
This script depends on the layout of depots. It assumes a file structure of
some directory
    couchbase-list-java-native
    ...
    thali

In other words that there is a single directory that contains all the relevant depots below including Thali.
 */
def getAllProjects() {
    return [
        ['../../Tor_Onion_Proxy_Library/universal/build.gradle',    [testTask()]],
        ['../../Tor_Onion_Proxy_Library/java/build.gradle',         [testTask()]],
        ['../../Tor_Onion_Proxy_Library/android/build.gradle',      [androidTestTask()]],
        ['../../couchbase-lite-java-native/build.gradle',           [testTask()]],
        ['../../couchbase-lite-java-core/build.gradle',             [testTask()]],
        ['../../couchbase-lite-java-listener/build.gradle',         [testTask()]],
        ['../../couchbase-lite-android/build.gradle',               [androidTestTask(false)]],

        // Couchbase Lite currently requires syncgateway to test or a special
        // config that supports listener. But in newer releases of the gateway this
        // was all fixed and uses mocks. We aren't going to upgrade right now for
        // stability reasons so we are turning off the tests until we get the upgrade.
        // https://github.com/thaliproject/thali/issues/53
        ['../../couchbase-lite-java/build.gradle',                  [testTask(false)]],
        ['Utilities/UniversalUtilities/build.gradle',               [testTask()]],
        ['Utilities/JavaUtilities/build.gradle',                    [testTask()]],
        ['Utilities/AndroidUtilities/build.gradle',                 [androidTestTask()]],
        ['ThaliDeviceHub/Universal/build.gradle',                   [testTask()]],
        ['ThaliDeviceHub/java/build.gradle',                        [testTask(), 'installApp']],
        ['ThaliDeviceHub/android/android/build.gradle',             [androidTestTask(), 'build']]
    ]
}

/**
 * Launch Gradle against each subproject
 *
 * @param startParameter        Gradle project's start parameter
 * @param task                  Name of Gradle task to execute
 * @param runTaskArgumentOnly   If set to true, will execute 'task' argument only. 
 *                              Otherwise, will prepend default tasks defined by getAllProjects()
 * @param runTaskAgainstTdh     If set to true, Gradle task will be executed against all subprojects
 *                              Otherwise, TDH/Android and TDH/java will be special cased
 */
def launchGradle(startParameter, task, runTaskArgumentOnly = true, runTaskAgainstTdh = true) {
    getAllProjects().each { thaliProject ->
        // build file
        def buildFile = new File(thaliProject[0])
        logger.info task + ': BuildFile: ' + buildFile

        def tasks = (runTaskArgumentOnly) ? [] : thaliProject[1]
        tasks.add(task)

        if (!runTaskAgainstTdh) {
            if (buildFile.toString().contains('ThaliDeviceHub') &&
                (buildFile.toString().contains('android') || buildFile.toString().contains('java'))) {
                // if this is TDH/java or TDH/android, remove install task
                tasks.remove(task)
            }
        }

        tasks.removeAll([null])
        logger.info task + ': Tasks: ' + tasks

        def params = project.gradle.startParameter.newBuild()
        params.setTaskNames(tasks)
        params.buildFile = buildFile
        params.projectProperties = startParameter.projectProperties
        params.systemPropertiesArgs = startParameter.systemPropertiesArgs
        
        GradleLauncher.newInstance(params).run().rethrowFailure()
    }
}

task cleanAll(type:GradleBuild) << {
    launchGradle(startParameter, 'clean', true, true)
}

task installAll(type:GradleBuild) << {
    launchGradle(startParameter, 'install', false, false)
}

task uploadArchivesAll(type:GradleBuild) << {
    launchGradle(startParameter, 'uploadArchives', false, false)
}

tasks.withType(GradleBuild) {
    ext.buildWithArtifacts = 'true'
    ext.buildVersion = System.getProperty('MAVEN_UPLOAD_VERSION')

    startParameter.projectProperties = gradle.startParameter.projectProperties
    startParameter.systemPropertiesArgs = [
        'UPLOAD_VERSION_CBLITE'     : buildVersion,
        'MAVEN_UPLOAD_VERSION'      : buildVersion,
        'MAVEN_UPLOAD_REPO_URL'     : System.getProperty('MAVEN_UPLOAD_REPO_URL'),
        'MAVEN_UPLOAD_USERNAME'     : System.getProperty('MAVEN_UPLOAD_USERNAME'),
        'MAVEN_UPLOAD_PASSWORD'     : System.getProperty('MAVEN_UPLOAD_PASSWORD'),

        // flags used in couchbase projects to retrieve dependencies via Maven
        'buildAndroidWithArtifacts' : buildWithArtifacts,
        'buildListenerWithArtifacts': buildWithArtifacts,
        'buildAgainstMavenArtifacts': buildWithArtifacts,
    ]
}


distributions {
    main {
        baseName = 'ThaliPPNETDemo'
        contents {
            from { 'build/PPNET'}
        }
    }
}

task deletePPNETBuildDirectory(type: Delete) {
    delete 'build/PPNET'
}

task copyChromeNativeMessagingHost(type: Copy, dependsOn: deletePPNETBuildDirectory) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeNativeMessagingHost/bin/debug/'
    into 'build/PPNET/ChromeNativeMessagingHost'
}

task copyChromeExtension(type:Copy, dependsOn: copyChromeNativeMessagingHost) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeExtension'
    into 'build/PPNET/ChromeExtension'
}

task deleteIdeaFolderFromChromeExtension(type: Delete, dependsOn: copyChromeExtension) {
    delete 'build/PPNET/ChromeExtension/.idea'
}

task copyAndroidTDH(type: Copy, dependsOn: deleteIdeaFolderFromChromeExtension) {
    from 'ThaliDeviceHub/android/android/build/apk/android-debug-unaligned.apk'
    into 'build/PPNET/ThaliDeviceHubs'
}

// Adapted from http://mrhaki.blogspot.com/2012/06/gradle-goodness-unpacking-archive.html
task unzipAndCopyJavaTDH(type: Copy, dependsOn: copyAndroidTDH) {
    from zipTree(file('ThaliDeviceHub/java/build/distributions/java.zip'))
    into 'build/PPNET/ThaliDeviceHubs/'
}

task copyPPNETFilesIntoChromeExtension(type: Copy, dependsOn: unzipAndCopyJavaTDH) {
    from '../../ppnet/'
    into 'build/PPNET/ChromeExtension/apps'
}

task copyPouchAPKToOwnDirectory(type: Copy, dependsOn: copyPPNETFilesIntoChromeExtension) {
    from 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
    into 'build/PPNET/AndroidClient/'
}

task deletePouchAPKFromChromeExtension(type: Delete, dependsOn: copyPouchAPKToOwnDirectory) {
    delete 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
}

distZip.dependsOn deletePouchAPKFromChromeExtension

task buildPPNETDemo(dependsOn: distZip) {
}
