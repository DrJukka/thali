apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = 1.6
version = System.getProperty('MAVEN_UPLOAD_VERSION') ?: '1.0.0-beta3rc1'

/*
This script depends on the layout of depots. It assumes a file structure of
some directory
    couchbase-list-java-native
    ...
    thali

In other words that there is a single directory that contains all the relevant depots below including Thali.
 */

// You can pass in -PcleanAll on the command line to do a clean
// You can pass in -PskipAndroidTest on the command line to skip android tests
def runAndroidTest(buildTask, runTest = true) {
   if (project.hasProperty('cleanAll')) {
	   return [ 'clean' ];
   }
   
   if (runTest == false || project.hasProperty('skipAndroidTest') || project.hasProperty('skipAllTest')) {
       return [ buildTask ];
   } else {
       return ['connectedAndroidTest', buildTask];
   }
}

def runJavaTest(buildTask, runTest = true) {
    if (project.hasProperty('cleanAll')) {
	  return [ 'clean' ];
	}
	
	if (runTest == false || project.hasProperty('skipJavaTest') || project.hasProperty('skipAllTest')) {
		return [ buildTask];
	} else {
		return ['test', buildTask];
	}
}
 
tasks.withType(GradleBuild) {
    ext.buildWithArtifacts = 'true'

    startParameter.projectProperties = gradle.startParameter.projectProperties
    startParameter.systemPropertiesArgs = [
        'UPLOAD_VERSION_CBLITE'     : version,
        'MAVEN_UPLOAD_VERSION'      : version,
        'MAVEN_UPLOAD_REPO_URL'     : System.getProperty('MAVEN_UPLOAD_REPO_URL'),
        'MAVEN_UPLOAD_USERNAME'     : System.getProperty('MAVEN_UPLOAD_USERNAME'),
        'MAVEN_UPLOAD_PASSWORD'     : System.getProperty('MAVEN_UPLOAD_PASSWORD'),

        // flags used in couchbase projects to retrieve dependencies via Maven
        'buildAndroidWithArtifacts' : buildWithArtifacts,
        'buildListenerWithArtifacts': buildWithArtifacts,
        'buildAgainstMavenArtifacts': buildWithArtifacts,
    ]
}

task buildTorOnionProxyLibraryUniversal(type: GradleBuild) {
    buildFile = '../../Tor_Onion_Proxy_Library/universal/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildTorOnionProxyLibraryJava(type: GradleBuild, dependsOn: 'buildTorOnionProxyLibraryUniversal') {
    buildFile = '../../Tor_Onion_Proxy_Library/java/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildTorOnionProxyLibraryAndroid(type: GradleBuild, dependsOn: 'buildTorOnionProxyLibraryJava') {
    buildFile = '../../Tor_Onion_Proxy_Library/android/build.gradle'
    tasks = runAndroidTest('uploadArchives')
}

// Note that if you get a broken build with link errors the only way to get things going again is
// to execute a clean in the tasks list below. Also note that in windows I
// can only get this to build from a command window, not from the Git MINGW32
// window I normally use.
task buildCouchbaseLiteJavaNative(type: GradleBuild, dependsOn: 'buildTorOnionProxyLibraryAndroid') {
    buildFile = '../../couchbase-lite-java-native/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildCouchbaseLiteJavaCore(type: GradleBuild, dependsOn: 'buildCouchbaseLiteJavaNative') {
    buildFile = '../../couchbase-lite-java-core/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildCouchbaseLiteJavaListener(type: GradleBuild, dependsOn: 'buildCouchbaseLiteJavaCore') {
    buildFile = '../../couchbase-lite-java-listener/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

// See issue 53 in the next task
task buildCouchbaseLiteAndroid(type: GradleBuild, dependsOn: 'buildCouchbaseLiteJavaListener') {
    buildFile = '../../couchbase-lite-android/build.gradle'
    tasks = runAndroidTest('uploadArchives', false)
}

// Couchbase Lite currently requires syncgateway to test or a special
// config that supports listener. But in newer releases of the gateway this
// was all fixed and uses mocks. We aren't going to upgrade right now for
// stability reasons so we are turning off the tests until we get the upgrade.
// https://github.com/thaliproject/thali/issues/53
task buildCouchbaseLiteJava(type: GradleBuild, dependsOn: 'buildCouchbaseLiteAndroid') {
    buildFile = '../../couchbase-lite-java/build.gradle'
    tasks = runJavaTest('uploadArchives', false)
}

task buildThaliUniversalUtilities(type: GradleBuild, dependsOn: 'buildCouchbaseLiteJava') {
    buildFile = 'Utilities/UniversalUtilities/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildThaliJavaUtilities(type: GradleBuild, dependsOn: 'buildThaliUniversalUtilities') {
    buildFile = 'Utilities/JavaUtilities/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildThaliAndroidUtilities(type: GradleBuild, dependsOn: 'buildThaliJavaUtilities') {
    buildFile = 'Utilities/AndroidUtilities/build.gradle'
    tasks = runAndroidTest('uploadArchives')
}

task buildThaliDeviceHubUniversal(type: GradleBuild, dependsOn: 'buildThaliAndroidUtilities') {
    buildFile = 'ThaliDeviceHub/Universal/build.gradle'
    tasks = runJavaTest('uploadArchives')
}

task buildThaliDeviceHubJava(type: GradleBuild, dependsOn: 'buildThaliDeviceHubUniversal') {
    buildFile = 'ThaliDeviceHub/java/build.gradle'
    tasks = runJavaTest('distZip') // This isn't a library, it's an 'executable', this builds the distribution
}

task buildThaliDeviceHubAndroid(type: GradleBuild, dependsOn: 'buildThaliDeviceHubJava') {
    buildFile = 'ThaliDeviceHub/android/android/build.gradle'
    tasks = runAndroidTest('build') // This isn't a library, it's an 'executable', this builds the apk file
}

task globalBuild(dependsOn: 'buildThaliDeviceHubAndroid'){}

// BUILD THE PPNET DEMO

distributions {
    main {
        baseName = 'ThaliPPNETDemo'
        contents {
            from { 'build/PPNET'}
        }
    }
}

task deletePPNETBuildDirectory(type: Delete) {
    delete 'build/PPNET'
}

task copyChromeNativeMessagingHost(type: Copy, dependsOn: deletePPNETBuildDirectory) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeNativeMessagingHost/bin/debug/'
    into 'build/PPNET/ChromeNativeMessagingHost'
}

task copyChromeExtension(type:Copy, dependsOn: copyChromeNativeMessagingHost) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeExtension'
    into 'build/PPNET/ChromeExtension'
}

task deleteIdeaFolderFromChromeExtension(type: Delete, dependsOn: copyChromeExtension) {
    delete 'build/PPNET/ChromeExtension/.idea'
}

task copyAndroidTDH(type: Copy, dependsOn: deleteIdeaFolderFromChromeExtension) {
    from 'ThaliDeviceHub/android/android/build/apk/android-debug-unaligned.apk'
    into 'build/PPNET/ThaliDeviceHubs'
}

// Adapted from http://mrhaki.blogspot.com/2012/06/gradle-goodness-unpacking-archive.html
task unzipAndCopyJavaTDH(type: Copy, dependsOn: copyAndroidTDH) {
    from zipTree(file('ThaliDeviceHub/java/build/distributions/java.zip'))
    into 'build/PPNET/ThaliDeviceHubs/'
}

task copyPPNETFilesIntoChromeExtension(type: Copy, dependsOn: unzipAndCopyJavaTDH) {
    from '../../ppnet/'
    into 'build/PPNET/ChromeExtension/apps'
}

task copyPouchAPKToOwnDirectory(type: Copy, dependsOn: copyPPNETFilesIntoChromeExtension) {
    from 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
    into 'build/PPNET/AndroidClient/'
}

task deletePouchAPKFromChromeExtension(type: Delete, dependsOn: copyPouchAPKToOwnDirectory) {
    delete 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
}

distZip.dependsOn deletePouchAPKFromChromeExtension

task buildPPNETDemo(dependsOn: distZip) {
}



