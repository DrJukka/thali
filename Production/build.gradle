apply plugin: 'java'
apply plugin: 'distribution'

sourceCompatibility = 1.6
version = '0.0.2'

// You can pass in -PskipAndroidTest on the command line to skip android tests
def runAndroidTest(buildTask, runTest = true) {
   if (runTest == false || project.hasProperty('skipAndroidTest')) {
       return [ buildTask ];
   } else {
       return ['connectedAndroidTest', buildTask];
   }
}

task buildThaliUniversalUtilities(type: GradleBuild) {
    buildFile = 'Utilities/UniversalUtilities/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['test', 'uploadArchives']
}

task buildThaliJavaUtilities(type: GradleBuild) {
    buildFile = 'Utilities/JavaUtilities/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['test', 'uploadArchives']
}

task buildThaliAndroidUtilities(type: GradleBuild) {
    buildFile = 'Utilities/AndroidUtilities/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = runAndroidTest('uploadArchives')
}

task buildThaliDeviceHubUniversal(type: GradleBuild) {
    buildFile = 'ThaliDeviceHub/Universal/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = [/*'connectedAndroidTest',*/ 'test', 'uploadArchives']
}

task buildThaliDeviceHubJava(type: GradleBuild) {
    buildFile = 'ThaliDeviceHub/java/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = ['test', 'distZip'] // This isn't a library, it's an 'executable', this builds the distribution
}

task buildThaliDeviceHubAndroid(type: GradleBuild) {
    buildFile = 'ThaliDeviceHub/android/build.gradle'
    startParameter.projectProperties = gradle.startParameter.projectProperties
    tasks = runAndroidTest('build') // This isn't a library, it's an 'executable', this builds the apk file
}

ext.buildThaliDependencies = [
    'buildThaliDeviceHubAndroid',
    'buildThaliDeviceHubJava',
    'buildThaliDeviceHubUniversal',
    'buildThaliAndroidUtilities',
    'buildThaliJavaUtilities',
    'buildThaliUniversalUtilities',
]

task buildThali(
    dependsOn: [buildThaliDependencies],
    description: 'Builds, tests, uploads artifacts for Thali'
)

if (gradle.startParameter.taskNames.contains("globalBuild")) {
    buildThali.dependsOn buildCouchbaseLiteJava 
}

task globalBuild(
    dependsOn: [buildThali],
    description: 'Builds, tests, uploads artifacts for Thali, Couchbase, Tor projects'
)

// BUILD THE PPNET DEMO

distributions {
    main {
        baseName = 'ThaliPPNETDemo'
        contents {
            from { 'build/PPNET'}
        }
    }
}

task deletePPNETBuildDirectory(type: Delete) {
    delete 'build/PPNET'
}

task copyChromeNativeMessagingHost(type: Copy, dependsOn: deletePPNETBuildDirectory) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeNativeMessagingHost/bin/debug/'
    into 'build/PPNET/ChromeNativeMessagingHost'
}

task copyChromeExtension(type:Copy, dependsOn: copyChromeNativeMessagingHost) {
    from 'Utilities/DotNetUtilities/DotNetUtilities/ChromeExtension'
    into 'build/PPNET/ChromeExtension'
}

task deleteIdeaFolderFromChromeExtension(type: Delete, dependsOn: copyChromeExtension) {
    delete 'build/PPNET/ChromeExtension/.idea'
}

task copyAndroidTDH(type: Copy, dependsOn: deleteIdeaFolderFromChromeExtension) {
    from 'ThaliDeviceHub/android/android/build/apk/android-debug-unaligned.apk'
    into 'build/PPNET/ThaliDeviceHubs'
}

// Adapted from http://mrhaki.blogspot.com/2012/06/gradle-goodness-unpacking-archive.html
task unzipAndCopyJavaTDH(type: Copy, dependsOn: copyAndroidTDH) {
    from zipTree(file('ThaliDeviceHub/java/build/distributions/java.zip'))
    into 'build/PPNET/ThaliDeviceHubs/'
}

task copyPPNETFilesIntoChromeExtension(type: Copy, dependsOn: unzipAndCopyJavaTDH) {
    from '../../ppnet/'
    into 'build/PPNET/ChromeExtension/apps'
}

task copyPouchAPKToOwnDirectory(type: Copy, dependsOn: copyPPNETFilesIntoChromeExtension) {
    from 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
    into 'build/PPNET/AndroidClient/'
}

task deletePouchAPKFromChromeExtension(type: Delete, dependsOn: copyPouchAPKToOwnDirectory) {
    delete 'build/PPNET/ChromeExtension/apps/AndroidPouchDbSDK-debug-unaligned.apk'
}

distZip.dependsOn deletePouchAPKFromChromeExtension

task buildPPNETDemo(dependsOn: distZip) {
}

