/*
Copyright (c) Microsoft Open Technologies, Inc.
All Rights Reserved
Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the
License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED,
INCLUDING WITHOUT LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache 2 License for the specific language governing permissions and limitations under the License.
*/

apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'maven'
//apply from: 'javafx.plugin'

// Naming our jar 'java' is less than useful.
jar.baseName 'ThaliDeviceHub'

// Gives our scripts for distZip a more useful name
startScripts.applicationName "start" + jar.baseName

mainClassName = "com.msopentech.thali.devicehub.javahub.main"

version = System.getProperty('MAVEN_UPLOAD_VERSION')
group = 'com.msopentech.thali'

repositories {
    mavenLocal()
    maven { url "http://thaliartifactory.cloudapp.net/artifactory/libs-snapshot" }
    maven { url "http://thaliartifactory.cloudapp.net/artifactory/libs-release" }
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
}

dependencies {
    compile 'com.msopentech.thali:ThaliUtilitiesJava:' + System.getProperty('MAVEN_UPLOAD_VERSION')
    compile 'com.msopentech.thali:ThaliTDHUniversal:' + System.getProperty('MAVEN_UPLOAD_VERSION')
    compile 'com.msopentech.thali:BriarJtorctl:' + System.getProperty('MAVEN_UPLOAD_VERSION')
    compile 'org.slf4j:slf4j-simple:1.7.7'

    testCompile 'junit:junit:4.11'
}

distZip.baseName 'ThaliDeviceHub'

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task generateJavadocs(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives generateJavadocs
}


def tempOutputDir = file("${buildDir}/unpacked/dist")

task deleteOldUnzip(type:Delete, dependsOn: distZip) {
    delete tempOutputDir
}

task unzipDistZip(type: Copy, dependsOn: deleteOldUnzip) {
    def zipFile = file(distZip.archivePath)
    from zipTree(zipFile)
    into tempOutputDir
}

task deleteOldZip(type: Delete, dependsOn: unzipDistZip) {
    delete distZip.archivePath
}

def unzipDirectoryRoot = file(tempOutputDir.path + "/" +
        distZip.archiveName.substring(0, distZip.archiveName.length() - 1 - distZip.extension.length()))

// The distZip file contains an extra directory at the root with the same name as the zip file. I'm sure
// there is some switch to make it not do that but I haven't found it. So instead I unzip the file, move
// it's contents and then re-zip but skip that extra directory.
task skipLevelZip(type: Zip, dependsOn: deleteOldZip) {
    from unzipDirectoryRoot
    baseName distZip.baseName
}

task zipAndInstall(dependsOn: ['installApp', 'skipLevelZip']) {}